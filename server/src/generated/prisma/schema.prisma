// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CANDIDATE
  INTERVIEWER
  ADMIN
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  NO_SHOW
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      Role
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  interviewsAsCandidate    Interview[]  @relation("Candidate")
  interviewsAsInterviewer  Interview[]  @relation("Interviewer")
  slots                    Slot[]
  assignmentsAsCandidate   Assignment[] @relation("CandidateAssignment")
  assignmentsAsInterviewer Assignment[] @relation("InterviewerAssignment")
}

model Interview {
  id            String @id @default(uuid())
  candidate     User   @relation("Candidate", fields: [candidateId], references: [id])
  candidateId   String
  interviewer   User   @relation("Interviewer", fields: [interviewerId], references: [id])
  interviewerId String

  audioUrl    String?
  codeHistory Json[]          @default([])
  room        Room?
  scheduledAt DateTime
  status      InterviewStatus @default(SCHEDULED)
  evaluation  Evaluation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id          String    @id @default(uuid())
  roomName    String    @unique
  link        String    @unique
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String    @unique
}

model Evaluation {
  id          String    @id @default(uuid())
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String    @unique

  score     Int
  remarks   String
  createdAt DateTime @default(now())
}

model Assignment {
  id          String @id @default(uuid())
  candidate   User   @relation("CandidateAssignment", fields: [candidateId], references: [id])
  candidateId String

  interviewer   User   @relation("InterviewerAssignment", fields: [interviewerId], references: [id])
  interviewerId String
}

model Slot {
  id            String @id @default(uuid())
  interviewer   User   @relation(fields: [interviewerId], references: [id])
  interviewerId String

  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
}
